name: CI
on:
  push:
    #branches: [ "1.6" ]
    tags:
      - "v*.*.*"
jobs:
  setenv:
    runs-on: ubuntu-20.04
    steps:
      - name: Check Tag
        id: check-tag
        run: |
          if [[ $GITHUB_REF_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              echo name=match;
          else
              exit 1;
          fi
      - name: Check ENV
        id: getenv
        run: |
          echo "tag_name=${GITHUB_REF_NAME:1}" >> $GITHUB_OUTPUT
    outputs:
      tag_name: ${{ steps.getenv.outputs.tag_name }}
  sonarqube:
    runs-on: ubuntu-20.04
    needs: setenv
    steps:
      - name: Check ENV
        id: getenv
        run: |
          echo "TAG_NAME=${GITHUB_REF_NAME:1}" >> $GITHUB_ENV
          echo "PROJECT_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14" # Choose your desired Node.js version

      - name: Install dependencies
        run: npm install

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze
        uses:
          kitabisa/sonarqube-action@v1.2.0
          # run: |
          #   echo ${{ env.PROJECT_NAME }}
        with:
          host: ${{ secrets.SONAR_HOST_URL }}
          login: ${{ secrets.SONAR_TOKEN }}
          projectKey: ${{ env.PROJECT_NAME  }}
          projectName: ${{ env.PROJECT_NAME  }}-${{ needs.setenv.outputs.tag_name }}
         
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Check Quality Gate
        run: |
          sleep 15
          QUALITY_GATE_STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: ${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=$PROJECT_NAME | jq -r '.projectStatus.status')
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo $QUALITY_GATE_STATUS
            echo "Quality gate not passed."
            exit 1
          fi
  dependency-check:
    needs: setenv
    runs-on: ubuntu-20.04
    steps:
      - name: Check ENV
        id: getenv
        run: |
          echo "TAG_NAME=${GITHUB_REF_NAME:1}" >> $GITHUB_ENV
          echo "PROJECT_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        env:
          # actions/setup-java@v1 changes JAVA_HOME so it needs to be reset to match the depcheck image
          JAVA_HOME: /opt/jdk
        with:
          project: "nodejs-dependency-check"
          path: "."
          format: "ALL"
          out: "reports" # this is the default, no need to specify unless you wish to override it
          args: >
            --enableRetired
      #            --failOnCVSS 7
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports
  trivy:
    runs-on: ubuntu-20.04
    permissions: write-all
    needs: setenv
    steps:
      - name: Check ENV
        id: getenv
        run: |
          echo "TAG_NAME=${GITHUB_REF_NAME:1}" >> $GITHUB_ENV
          echo "PROJECT_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          output: trivy-report.html
          template: "@.github/report-template.html"
          format: template
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy Report as an Artifact
        uses: actions/upload-artifact@v2
        with:
          name: trivy-report
          path: "trivy-report.html"

  build-container:
    runs-on: ubuntu-latest
    needs:
      - setenv
      - sonarqube
      - dependency-check
      - trivy
    steps:
      - uses: actions/checkout@master
      - name: Kaniko build
        uses: aevea/action-kaniko@master
        with:
          image: ${{secrets.registry_team}}/${{secrets.registry_project}}
          registry: ${{ secrets.registry_endpoint }}
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_password }}
          tag: ${{ needs.setenv.outputs.tag_name }}
